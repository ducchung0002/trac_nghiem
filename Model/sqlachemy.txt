from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.engine import URL

# Use the connection string for SQL Server
# SQLALCHEMY_DATABASE_URL = "mssql+pyodbc://@localhost:1433/trac_nghiem?driver=ODBC+Driver+17+for+SQL+Server"
SQLALCHEMY_DATABASE_URL = URL.create(
    drivername="mssql+pyodbc",
    host="localhost",
    port=1433,
    database="trac_nghiem",
    query={
        "driver": "ODBC Driver 18 for SQL Server",
        "TrustServerCertificate": "yes",
        "authentication": "ActiveDirectoryIntegrated",
    },
)

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()
#
# MODEL
#
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean, func
from sqlalchemy.orm import relationship
from sqlalchemy.types import NVARCHAR


class Admin(Base):
    __tablename__ = "admin"

    email = Column(String, primary_key=True, index=True)
    hash_pswd = Column(String(255))
    name = Column(NVARCHAR(100))
    is_banned = Column(Boolean, default=False)

class Report(Base):
    __tablename__ = "report"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(NVARCHAR(None))
    content = Column(NVARCHAR(None))
    student_id = Column(Integer, ForeignKey("student.id"))


class Student(Base):
    __tablename__ = "student"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, nullable=False, index=True)
    name = Column(NVARCHAR(100))
    hash_pswd = Column(String(255))
    avatar_path = Column(String(255))
    is_banned = Column(Boolean, default=False)


class Teacher(Base):
    __tablename__ = "teacher"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, nullable=False, index=True)
    name = Column(NVARCHAR(100))
    hash_pswd = Column(String(255))
    avatar_path = Column(String(255))
    is_banned = Column(Boolean, default=False)


class Group(Base):
    __tablename__ = "group"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(NVARCHAR(100))
    teacher_id = Column(Integer, ForeignKey('teacher.id'), nullable=False)
    created_timestamp = Column(DateTime, default=func.now())
    is_show = Column(Boolean, default=True)


class GroupStudent(Base):
    __tablename__ = "group_student"

    group_id = Column(Integer, ForeignKey('group.id'), primary_key=True)
    student_id = Column(Integer, ForeignKey('student.id'), primary_key=True)
    is_join = Column(Boolean, default=True)


class GroupTest(Base):
    __tablename__ = "group_test"

    id = Column(Integer, primary_key=True, index=True)
    group_id = Column(Integer, ForeignKey('group.id'), nullable=False)
    test_path = Column(String(500))
    start = Column(DateTime)
    end = Column(DateTime)
    created_timestamp = Column(DateTime, default=func.now())


class Collection(Base):
    __tablename__ = "collection"

    id = Column(Integer, primary_key=True, index=True)
    teacher_id = Column(Integer, ForeignKey('teacher.id'), nullable=False)
    name = Column(NVARCHAR(100))


class QuestionBank(Base):
    __tablename__ = "question_bank"

    id = Column(Integer, primary_key=True, index=True)
    collection_id = Column(Integer, ForeignKey('collection.id'), nullable=False)
    name = Column(NVARCHAR(100))


class GenerateTest(Base):
    __tablename__ = "generate_test"

    id = Column(Integer, primary_key=True, index=True)
    collection_id = Column(Integer, ForeignKey('collection.id'), nullable=False)
    name = Column(NVARCHAR(100))


class ManualTest(Base):
    __tablename__ = "manual_test"

    id = Column(Integer, primary_key=True, index=True)
    collection_id = Column(Integer, ForeignKey('collection.id'), nullable=False)
    name = Column(NVARCHAR(100))
